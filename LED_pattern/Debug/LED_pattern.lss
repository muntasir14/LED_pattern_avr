
LED_pattern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  0000011e  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c9  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d5  00000000  00000000  00000901  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c2  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000341  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000099  00000000  00000000  0000150d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e1       	ldi	r30, 0x1E	; 30
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  7a:	0c 94 8d 00 	jmp	0x11a	; 0x11a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <getKeyPressed>:
						{4, 5, 6, 11},
						{7, 8, 9, 12},
						{14, 0, 15, 13}};
							
uint8_t getKeyPressed() {
	DDRB = 0x0F;
  82:	8f e0       	ldi	r24, 0x0F	; 15
  84:	87 bb       	out	0x17, r24	; 23
	PORTB = 0xF0;
  86:	90 ef       	ldi	r25, 0xF0	; 240
  88:	98 bb       	out	0x18, r25	; 24
	DDRC = 0x0F;
  8a:	84 bb       	out	0x14, r24	; 20
	
	for(uint8_t row = 0; row < 4; row++) {
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	30 c0       	rjmp	.+96     	; 0xf0 <getKeyPressed+0x6e>
		PORTB = ~(1 << row);
  90:	e3 2f       	mov	r30, r19
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	03 2e       	mov	r0, r19
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <getKeyPressed+0x1e>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	0a 94       	dec	r0
  a2:	e2 f7       	brpl	.-8      	; 0x9c <getKeyPressed+0x1a>
  a4:	80 95       	com	r24
  a6:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f e3       	ldi	r24, 0x3F	; 63
  aa:	9c e9       	ldi	r25, 0x9C	; 156
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <getKeyPressed+0x2a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <getKeyPressed+0x30>
  b2:	00 00       	nop
		_delay_ms(20);
		for(uint8_t col = 0; col < 4; col++) {
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	19 c0       	rjmp	.+50     	; 0xea <getKeyPressed+0x68>
			if(!(PINB & (1 << (col + 4)))) {
  b8:	86 b3       	in	r24, 0x16	; 22
  ba:	42 2f       	mov	r20, r18
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	ba 01       	movw	r22, r20
  c0:	6c 5f       	subi	r22, 0xFC	; 252
  c2:	7f 4f       	sbci	r23, 0xFF	; 255
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <getKeyPressed+0x4a>
  c8:	95 95       	asr	r25
  ca:	87 95       	ror	r24
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <getKeyPressed+0x46>
  d0:	80 fd       	sbrc	r24, 0
  d2:	0a c0       	rjmp	.+20     	; 0xe8 <getKeyPressed+0x66>
				return keypad[row][col];
  d4:	ee 0f       	add	r30, r30
  d6:	ff 1f       	adc	r31, r31
  d8:	ee 0f       	add	r30, r30
  da:	ff 1f       	adc	r31, r31
  dc:	e0 5a       	subi	r30, 0xA0	; 160
  de:	ff 4f       	sbci	r31, 0xFF	; 255
  e0:	e4 0f       	add	r30, r20
  e2:	f5 1f       	adc	r31, r21
  e4:	80 81       	ld	r24, Z
  e6:	08 95       	ret
	DDRC = 0x0F;
	
	for(uint8_t row = 0; row < 4; row++) {
		PORTB = ~(1 << row);
		_delay_ms(20);
		for(uint8_t col = 0; col < 4; col++) {
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	24 30       	cpi	r18, 0x04	; 4
  ec:	28 f3       	brcs	.-54     	; 0xb8 <getKeyPressed+0x36>
uint8_t getKeyPressed() {
	DDRB = 0x0F;
	PORTB = 0xF0;
	DDRC = 0x0F;
	
	for(uint8_t row = 0; row < 4; row++) {
  ee:	3f 5f       	subi	r19, 0xFF	; 255
  f0:	34 30       	cpi	r19, 0x04	; 4
  f2:	70 f2       	brcs	.-100    	; 0x90 <getKeyPressed+0xe>
			if(!(PINB & (1 << (col + 4)))) {
				return keypad[row][col];
			}
		}
	}
	return 0;
  f4:	80 e0       	ldi	r24, 0x00	; 0
}
  f6:	08 95       	ret

000000f8 <main>:

int main(void)
{
	DDRC = 0xFF;
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  fc:	15 ba       	out	0x15, r1	; 21
	
	uint8_t key;
	
	
	while(1) {
		key = getKeyPressed();
  fe:	0e 94 41 00 	call	0x82	; 0x82 <getKeyPressed>
		if(key != 0) {
 102:	81 11       	cpse	r24, r1
			PORTC = key;
 104:	85 bb       	out	0x15, r24	; 21
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	80 e7       	ldi	r24, 0x70	; 112
 10a:	92 e0       	ldi	r25, 0x02	; 2
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x14>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x1e>
 116:	00 00       	nop
 118:	f2 cf       	rjmp	.-28     	; 0xfe <main+0x6>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
